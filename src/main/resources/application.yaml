debug: false
management.endpoints.web.exposure.include: "*"

logging:
  level:
    com.fastcampus.projectboard: debug
    org.springframework.web.servlet: debug
    org.hibernate.type.descriptor.sql.BasicBinder: trace

spring:
  datasource:
    url: ${LOCAL_DB_URL}
    username: ${LOCAL_DB_USERNAME}
    password: ${LOCAL_DB_PASSWORD}
  jpa:
    open-in-view: false
    defer-datasource-initialization: true
    hibernate.ddl-auto: create
    show-sql: true
    properties:
      hibernate.format_sql: true
      hibernate.default_batch_fetch_size: 100
  sql.init.mode: always
  data.rest:
    base-path: /api
    detection-strategy: annotated
  thymeleaf3.decoupled-logic: true
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_OAUTH_CLIENT_ID}
            client-secret: ${KAKAO_OAUTH_CLIENT_SECRET}
            # OAuth 2.0 프로토콜에서 사용되는 인가 방식
            authorization-grant-type: authorization_code
            # 리다이렉트 uri 위치  {baseUrl} = spring에서 자동으로 기본 url 매칭시킴
            # {}사용시 ""를 통해 묶어줘야함
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            # authentication-method api 통신 방식
            client-authentication-method: POST
        provider:
          kakao:
            # 카카오 디벨롭 메뉴얼에서 찾아서 가져오면 됨 (필요한 정보를 가져오기 위한 종류별 URL)
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            # 카카오에서 데이터를 가져올때 기준(PK)값 설정  카카오인 경우 id가 기준임
            user-name-attribute: id

---

#spring:
#  config.activate.on-profile: heroku
#  datasource:
#    url: ${JAWSDB_URL}
#    driver-class-name: com.mysql.cj.jdbc.Driver
#  jpa.hibernate.ddl-auto: create
#  sql.init.mode: always

---

spring:
  config.activate.on-profile: test
  datasource.url: jdbc:h2:mem:testdb
